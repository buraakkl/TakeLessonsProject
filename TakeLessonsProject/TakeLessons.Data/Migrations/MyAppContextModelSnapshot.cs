// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TakeLessons.Data.Concrete.EfCore;

#nullable disable

namespace TakeLessons.Data.Migrations
{
    [DbContext(typeof(MyAppContext))]
    partial class MyAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("TakeLessons.Entity.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            Name = "Math"
                        },
                        new
                        {
                            BranchId = 2,
                            Name = "English"
                        },
                        new
                        {
                            BranchId = 3,
                            Name = "Chemistry"
                        },
                        new
                        {
                            BranchId = 4,
                            Name = "Music"
                        },
                        new
                        {
                            BranchId = 5,
                            Name = "Physics"
                        });
                });

            modelBuilder.Entity("TakeLessons.Entity.StateOfEducationsLevel", b =>
                {
                    b.Property<int>("StateOfEducationsLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("StateOfEducationsLevelId");

                    b.ToTable("StateOfEducationsLevels");

                    b.HasData(
                        new
                        {
                            StateOfEducationsLevelId = 1,
                            Name = "High School"
                        },
                        new
                        {
                            StateOfEducationsLevelId = 2,
                            Name = "Middle School"
                        },
                        new
                        {
                            StateOfEducationsLevelId = 3,
                            Name = "Primary School"
                        });
                });

            modelBuilder.Entity("TakeLessons.Entity.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Locations")
                        .HasColumnType("TEXT");

                    b.Property<int>("StateOfEducationsLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StateOfEducationsLevelId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 14,
                            DateOfRegistration = new DateTime(2022, 12, 1, 20, 47, 26, 231, DateTimeKind.Local).AddTicks(2867),
                            Description = "Hi There :)",
                            FirstName = "Bernard ",
                            Gender = "Male",
                            Image = "1.jpg",
                            IsDeleted = false,
                            LastName = "Anna",
                            Locations = "New York",
                            StateOfEducationsLevelId = 1,
                            Url = "students"
                        });
                });

            modelBuilder.Entity("TakeLessons.Entity.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CertifiedTrainer")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("HourlyPrice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFaceToFace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Locations")
                        .HasColumnType("TEXT");

                    b.Property<int>("StateOfEducationsLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniversityGraduatedFrom")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("StateOfEducationsLevelId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 47,
                            BranchId = 1,
                            CertifiedTrainer = true,
                            DateOfRegistration = new DateTime(2022, 12, 1, 20, 47, 26, 231, DateTimeKind.Local).AddTicks(2968),
                            Description = "Hello, I'm a math teacher",
                            Email = "engin_niyazi@gmail.com",
                            FirstName = "Engin Niyazi",
                            Gender = "Male",
                            HourlyPrice = 300,
                            Image = "24.jpg",
                            IsDeleted = false,
                            IsFaceToFace = true,
                            LastName = "Ergül",
                            Locations = "New York",
                            StateOfEducationsLevelId = 1,
                            UniversityGraduatedFrom = "Stanford Universty",
                            Url = "engin-niyazi-ergül"
                        },
                        new
                        {
                            Id = 2,
                            Age = 35,
                            BranchId = 2,
                            CertifiedTrainer = true,
                            DateOfRegistration = new DateTime(2022, 12, 1, 20, 47, 26, 231, DateTimeKind.Local).AddTicks(2971),
                            Description = "Hello, I'm a english teacher",
                            Email = "Goldschmidt@gmail.com",
                            FirstName = "Goldschmidt",
                            Gender = "Male",
                            HourlyPrice = 100,
                            Image = "2.jpg",
                            IsDeleted = false,
                            IsFaceToFace = true,
                            LastName = "Forguson",
                            Locations = "Alaska",
                            StateOfEducationsLevelId = 2,
                            UniversityGraduatedFrom = "Stanford Universty",
                            Url = "Goldschmidt"
                        },
                        new
                        {
                            Id = 3,
                            Age = 31,
                            BranchId = 3,
                            CertifiedTrainer = true,
                            DateOfRegistration = new DateTime(2022, 12, 1, 20, 47, 26, 231, DateTimeKind.Local).AddTicks(2973),
                            Description = "Hi I'am a chemistry teacher",
                            Email = "Bagel_Jean@gmail.com",
                            FirstName = "Bagel",
                            Gender = "Female",
                            HourlyPrice = 150,
                            Image = "4.jpg",
                            IsDeleted = false,
                            IsFaceToFace = false,
                            LastName = "Jean",
                            Locations = "Florida",
                            StateOfEducationsLevelId = 2,
                            UniversityGraduatedFrom = "Stanford Universty",
                            Url = "Bagel"
                        },
                        new
                        {
                            Id = 4,
                            Age = 28,
                            BranchId = 2,
                            CertifiedTrainer = true,
                            DateOfRegistration = new DateTime(2022, 12, 1, 20, 47, 26, 231, DateTimeKind.Local).AddTicks(2975),
                            Description = "Hi I'am a english teacher",
                            Email = "Miconi_autier@gmail.com",
                            FirstName = "Autier",
                            Gender = "Male",
                            HourlyPrice = 200,
                            Image = "5.jpg",
                            IsDeleted = false,
                            IsFaceToFace = true,
                            LastName = "Miconi",
                            Locations = "Virginia",
                            StateOfEducationsLevelId = 1,
                            UniversityGraduatedFrom = "Stanford Universty",
                            Url = "Autier"
                        },
                        new
                        {
                            Id = 5,
                            Age = 25,
                            BranchId = 1,
                            CertifiedTrainer = true,
                            DateOfRegistration = new DateTime(2022, 12, 1, 20, 47, 26, 231, DateTimeKind.Local).AddTicks(2977),
                            Description = "Hello, I'm a music teacher",
                            Email = "Eggerer_alax@gmail.com",
                            FirstName = "Eggerer",
                            Gender = "Male",
                            HourlyPrice = 80,
                            Image = "6.jpg",
                            IsDeleted = false,
                            IsFaceToFace = false,
                            LastName = "Alex",
                            Locations = "Hawaii",
                            StateOfEducationsLevelId = 3,
                            UniversityGraduatedFrom = "Stanford Universty",
                            Url = "Eggerer"
                        },
                        new
                        {
                            Id = 6,
                            Age = 42,
                            BranchId = 5,
                            CertifiedTrainer = true,
                            DateOfRegistration = new DateTime(2022, 12, 1, 20, 47, 26, 231, DateTimeKind.Local).AddTicks(2979),
                            Description = "Hi I'am a Physics teacher",
                            Email = "George_Male@gmail.com",
                            FirstName = "Li",
                            Gender = "Male",
                            HourlyPrice = 100,
                            Image = "7.jpg",
                            IsDeleted = false,
                            IsFaceToFace = true,
                            LastName = "George",
                            Locations = "Kaliforniya",
                            StateOfEducationsLevelId = 2,
                            UniversityGraduatedFrom = "Stanford Universty",
                            Url = "Li"
                        });
                });

            modelBuilder.Entity("TakeLessons.Entity.TeacherAndStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherAndStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("TakeLessons.Entity.Student", b =>
                {
                    b.HasOne("TakeLessons.Entity.StateOfEducationsLevel", "StateOfEducationsLevel")
                        .WithMany("Students")
                        .HasForeignKey("StateOfEducationsLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateOfEducationsLevel");
                });

            modelBuilder.Entity("TakeLessons.Entity.Teacher", b =>
                {
                    b.HasOne("TakeLessons.Entity.Branch", "Branch")
                        .WithMany("Teachers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TakeLessons.Entity.StateOfEducationsLevel", "StateOfEducationsLevel")
                        .WithMany("Teachers")
                        .HasForeignKey("StateOfEducationsLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("StateOfEducationsLevel");
                });

            modelBuilder.Entity("TakeLessons.Entity.TeacherAndStudent", b =>
                {
                    b.HasOne("TakeLessons.Entity.Student", "Student")
                        .WithMany("TeacherAndStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TakeLessons.Entity.Teacher", "Teacher")
                        .WithMany("TeacherAndStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TakeLessons.Entity.Branch", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("TakeLessons.Entity.StateOfEducationsLevel", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("TakeLessons.Entity.Student", b =>
                {
                    b.Navigation("TeacherAndStudents");
                });

            modelBuilder.Entity("TakeLessons.Entity.Teacher", b =>
                {
                    b.Navigation("TeacherAndStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
